import Component from './Component.mjs';
import {Button} from './Button.mjs';
import InputImage from './InputImage.mjs';
import IdForge from './IdForge.mjs';
import API from './API.mjs';
export default class InputMultipleImages extends Component {
    constructor(props) {
        super(props);
    }
    async render(element) {
        await super.render(element);
        await this.load();
        this.content = this.div('page-content');
        this.controls = this.div('page-controls');

        this.dropBox = this.div('drop-box',this.content);
        this.dropBox.ondrop = this.dropHandler.bind(this);
        this.dropBox.ondragover = this.dragHandler.bind(this);

        for (let id of this.imageIds) {
            let img = document.createElement('img');
            img.src = `media/image/id/creative/${this.props.context.id}/${id}.image?scale=60,60,cover`;
            img.classList.add("fixed");
            this.dropBox.append(img);
        }
        this.itemProperties = this.div('item-properties',this.content);
        await this.draw(Button,{name:'hello',title:'Hello'},this.controls);
    }
    async renderImage(file) {
        let img = await this.draw(InputImage,{
            data:{_id:IdForge.datedId()},
            collection:`${this.props.classification}/${this.props.context.id}`,
            name:"image",
            hideTitle:true
        },this.dropBox);
        img.inputFile.setFileListener(this.fileHandler.bind(this,img));
        img.inputFile.setTextListener(this.textHandler.bind(this,img));
        await img.uploadImage(file);
    }
    async renderImageSet() {

    }
    async load() {
        let classification = this.props.classification?`${this.props.classification}/`:``;
        this.imageIds = await API.get(`/media/image/list/${classification}`+this.props.context.id);
    }
    async dropHandler(event) {
        event.preventDefault();
        if (event.dataTransfer) {
            for (let file of event.dataTransfer.files) {
                await this.renderImage(file);
            }
        }
    }
    clickHandler(event) {
        this.input.click();
        this.input.addEventListener('change',(event)=>{
            this.file = this.input.files[0];
            this.drawFile();
        })
    }
    dragHandler(event) {
        event.preventDefault();
    }
    textHandler = async (input,text) => {
        if(input.disabled) return;
        input.disabled = true
        input.drawLoader()

        try {
            let url = text
            if(url.startsWith("http")) {
                url = url.replace(/^(http:\/\/|https:\/\/)/, "");
            }
            url = encodeURIComponent(url)

            const result = await fetch("/media/image/url/"+url, {
                method: 'GET',
            })
            if(!result.ok) throw new Error(result.status)

            const blob = await result.blob()

            input.disabled = false
            await this.fileHandler(input,blob);
        } catch(error) {
            console.error("Text handler error:", error)
            window.toast.error("Something went wrong")

            this.inputFile.disabled = false
            this.drawImageRender()
        }
    }
    fileHandler = async (input,file) => {
        if(!file || input.disabled) return;
        if(!file.type.startsWith("image/")) {
            this.drawImageRender()
            window.toast.error("Unknown file type")
            return;
        }

        input.disabled = true
        input.drawLoader()

        let success = false
        try {
            await this.uploadImage(file)
            success = true
        } catch(error) {
            console.error("Upload image error:", error)
            window.toast.error("Something went wrong")
        }

        input.disabled = false

        if(success) {
            await this.updateImage()
        } else {
            this.drawImageRender()
        }
    }
    drawImageRender() {
        if(this.imageRender) {
            this.inputFile.drawContent(this.imageRender);
        } else {
            this.inputFile.drawContent("");
        }
    }
}
